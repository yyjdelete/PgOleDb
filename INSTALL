This is Win32 only project, meant to be compiled with Visual Studio. However, it does require
a little more than just double clicking the dsw file and choosing "compile" to set up.

Digest of the steps required:
* Get the PostgreSQL sources of at least 7.4 http://www.postgresql.org/mirrors-ftp.html
* Either compile the sources for windows, or download a precompiled version from
  http://pgfoundry.org/projects/oledb/. Place the binary in your System32 directory.
* Set a global environment variable PSQLSRC to where the sources reside
* Double click the OleDb dsw and starting coding as usual.

If you are using Visual Studio 6, read towards the end of this file for more steps you will
need.

Long description

The project itself no longer carries the header files for libpq. In order to compile this
project, you will first need to compile libpq as a native Win32 DLL, or get the precompiled
version from http://pgfoundry.org/projects/oledb/. Please note that you will need to
download the PostgreSQL sources whether you compile libpq yourself or not.

Libpq is part of the PostgreSQL sources. The instructions for compiling libpq for Windows
are available in the documentation for PostgreSQL. This driver requires, at the very least,
the libpq that came with PostgreSQL version 7.4. Just download the sources and extract the
archive anywhere on your disk. Then follow the instructions in the manual. For 7.4, these can
be found at:
http://www.postgresql.org/docs/7.4/static/install-win32.html
Instructions for the latest version can usually be found at:
http://www.postgresql.org/docs/current/static/install-win32.html

After you have compiled libpq, you need to copy the generated libpq.dll file to your
system directory.

In addition to the above, the project file for PGOle searches for certain libraries
and include files under the postgresql source tree. In order to find it, you must set up
an environemnt variable called "PSQLSRC" to point to the root of the tree. This can usually
be achived by right clicking "My Computer" and changing the "Environemnt Settings".

Once these initial steps have been carried out, you can compile the PGOle project as usual.
If you are not a local Administrator you will need to register the resulting DLL with
regsvr32 running as Administrator. If your local user is a member of the Administrators
group, the registration takes place as part of the build process.

Distributing the resulting DLL requires PgOleDb.dll and libpq.dll. You will need to run
"regsvr32 PgOleDb.dll" on each machine where the provider needs to be installed.

Visual Studio 6 Users
Last time checked, PgOleDb compiled fine with the built-in libraries that came with VS6.
If you have upgraded the Platform SDK to a newer version from Microsoft, the following
additional steps may be required in order to compile PgOleDb:

- Compiling the libpq libraries
In the updated Platform SDK files, one of the include files depend on a file only available in
the Internet SDK. Make sure to install that SDK as well, or you will get a missing include
error.

- Compiling the actual provider:
If you get compilation errors inside "oledb.h", be sure to install the Microsoft Data Access
SDK. Go to http://msdn.microsoft.com, click "downloads", and type "Microsoft Data Access SDK"
in the search box. Be sure to add both the "inc" and the "idl" directories to the compiler's
search path.

- Compilatin errors on "InlineIsEqualGUID"
See http://support.microsoft.com/default.aspx?scid=kb;EN-US;q243298 for explanation of what
needs to be done in order to solve this one. Note that this means editing the actual system
header file. Yikes, I know.